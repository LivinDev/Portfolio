---
import type { HeaderData } from "@/config/landing.interface";
import Logo from "../assets/svg/logo-dark.svg";
import { Image } from "astro:assets";

interface Props {
  data: HeaderData;
}

const { data } = Astro.props;
---

<div class="navbar-container">
  <div class="navbar" id="navbar">
    <a href="/" class="logo"><Image src={Logo} alt="logo" /></a>
    <div class="nav-links">
      {
        data.links.map((item) => (
          <a class="nav-item" href={item.href} data-nav-item>
            {item.label}
          </a>
        ))
      }
    </div>
  </div>
</div>

<style>
  .navbar-container {
    position: fixed;
    top: 20px;
    left: 50%;
    transform: translateX(-50%);
    padding: 1px;
    border-radius: 50px;
    background: linear-gradient(
      45deg,
      #ff0000,
      #ff7300,
      #fffb00,
      #48ff00,
      #00ffd5,
      #002bff,
      #7a00ff,
      #ff00c8,
      #ff0000
    );
    background-size: 400%;
    animation: steam 20s linear infinite;
    z-index: 1000;
  }

  .navbar {
    background-color: #f9f9f9;
    color: rgb(33, 33, 33);
    padding: 5px 20px;
    border-radius: 50px;
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 1rem;
  }

  @keyframes steam {
    0% {
      background-position: 0 0;
    }
    50% {
      background-position: 400% 0;
    }
    100% {
      background-position: 0 0;
    }
  }

  .logo {
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .nav-links {
    display: flex;
    align-items: center;
    gap: 1rem;
    padding: 0.4rem;
    border-radius: 4px;
  }

  .nav-item {
    text-decoration: none;
    font-size: 14px;
    color: var(--white-color);
    padding: 0.5rem 0.8rem;
    border-radius: 5px;
    border: 1px solid rgb(157, 157, 157);
  }

  .nav-item.active {
    color: var(--primary-color);
  }

  @media (max-width: 840px) {
    .navbar-container {
      display: none;
    }
  }
</style>

<script>
  document.addEventListener("DOMContentLoaded", () => {
    const navItems = document.querySelectorAll("[data-nav-item]");
    const currentPath = window.location.pathname;
    const firstPathSegment = "/" + currentPath.split("/")[1];

    function setActiveNavItem() {
      navItems.forEach((item) => {
        const href = item.getAttribute("href");
        if (
          href === firstPathSegment ||
          (href === "/" && firstPathSegment === "/")
        ) {
          item.classList.add("active");
        } else {
          item.classList.remove("active");
        }
      });
    }

    setActiveNavItem();

    navItems.forEach((item) => {
      item.addEventListener("click", (e) => {
        const href = item.getAttribute("href");
        if (href === "#") {
          e.preventDefault();
        } else {
          navItems.forEach((navItem) => navItem.classList.remove("active"));
          item.classList.add("active");
        }
      });
    });
  });
</script>
